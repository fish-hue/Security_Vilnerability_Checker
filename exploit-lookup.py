import requests
from bs4 import BeautifulSoup
import time

def read_package_info(file_path):
    """Read package information from a .txt file."""
    package_info = []
    try:
        with open(file_path, 'r') as f:
            section = None
            for line in f:
                line = line.strip()
                if line.startswith("Outdated Packages:"):
                    section = 'outdated'
                    continue
                if section == 'outdated' and line.startswith('- Package:'):
                    parts = line.split(',')
                    package = parts[0].split(': ')[1].strip()
                    current_version = parts[1].split(': ')[1].strip()
                    package_info.append((package, current_version))
    except Exception as e:
        print(f"Error reading package info from {file_path}: {e}")
    return package_info

def check_exploit_db(package, version):
    """Check for known vulnerabilities of a package in the Exploit DB."""
    search_url = f"https://www.exploit-db.com/search?query={package}+{version}"
    response = requests.get(search_url)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        results = []
        exploits = soup.find_all("div", class_="item")
        
        for exploit in exploits:
            title = exploit.find("div", class_="description").get_text(strip=True)
            link = exploit.find("a", href=True)['href']
            results.append({'title': title, 'link': link})
        
        return results
    else:
        print(f"Error querying Exploit DB for {package}: {response.status_code}")
        return []

def main():
    print("Welcome to the Vulnerability Check Script")

    # User inputs the path to the .txt file
    file_path = input("\nEnter the path to your vulnerability check results .txt file: ")
    package_info = read_package_info(file_path)

    if package_info:
        print("\nChecking for vulnerabilities...")
        for package, current_version in package_info:
            vulnerabilities = check_exploit_db(package, current_version)
            if vulnerabilities:
                print(f"\nVulnerabilities found for {package} (Version: {current_version}):")
                for vuln in vulnerabilities:
                    print(f"- {vuln['title']}: {vuln['link']}")
            time.sleep(5)  # Adding a 5-second delay between requests
    else:
        print("No package information found.")

if __name__ == "__main__":
    main()
